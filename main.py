import os
import threading
import asyncio
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler
)
from flask import Flask

BOT_TOKEN = os.getenv("BOT_TOKEN")

flask_app = Flask(__name__)
@flask_app.route('/')
def home():
    return "‚úÖ GlovoPromoBot –ø—Ä–∞—Ü—é—î!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# --- –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏!
LINK_PODTV = "https://t.me/+HX9lFRXTtNlmNjdl" 
LINK_18_YES = "https://t.me/+8cmf0XKYgCI2NWY1" 
LINK_18_NO = "https://t.me/+mH1QsMXStwM2NGM1" 
LINK_MAN = "https://t.me/+xEyaki3qCUQwNjNl" 
LINK_WOMAN = "https://t.me/+XQCFoJIST9QwOTE1" 
LINK_UA = "https://t.me/+ZjKExDhWJFU3M2Jl" 
LINK_NOT_UA = "https://t.me/+-tf51XaB-OdhOGM1" 
REGION_LINKS = {
    'east': "https://t.me/+AXPIDA_mm3hjNWY1", 
    'central': "https://t.me/+LQo7v-Ce9S0zMGJl", 
    'west': "https://t.me/+XMx3gIRcCfRiNWNl", 
    'south': "https://t.me/+91tRkW0duIM0MWQ9", 
    'north': "https://t.me/+JgKrbLk05kw4NWI1", 
}

(
    STEP_CONFIRM, STEP_SERVICE, STEP_SUM,
    STEP_FINAL_CONFIRM, STEP_GET_PROMO
) = range(5)

user_data = {}

SERVICES = ["Glovo", "KFC", "McDonald‚Äôs", "–°—É—à—ñ—è", "Dominos Pizza"]
SUMS = ["100 –≥—Ä–Ω", "500 –≥—Ä–Ω", "1000 –≥—Ä–Ω", "2000 –≥—Ä–Ω"]

CERT_BLUR_IMG = {
    "Glovo": "glovo_cert_blur_v1.jpg",
    "KFC": "kfc_cert_blur_v1.jpg",
    "McDonald‚Äôs": "mcd_cert_blur_v1.jpg",
    "–°—É—à—ñ—è": "sushiya_cert_blur_v1.jpg",
    "Dominos Pizza": "dominos_cert_blur_v1.jpg"
}
CERT_FINAL_IMG = {
    "Glovo": "glovo_cert_final.jpg",
    "KFC": "kfc_cert_final.jpg",
    "McDonald‚Äôs": "mcd_cert_final.jpg",
    "–°—É—à—ñ—è": "sushiya_cert_final.jpg",
    "Dominos Pizza": "dominos_cert_final.jpg"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_user.id
    user_data[chat_id] = {}

    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
    await context.bot.send_message(
        chat_id,
        "üçî –í—ñ—Ç–∞—î–º–æ –≤ Glovo –ü—Ä–æ–º–æ–∫–æ–¥–∏ üçî!\n\n"
        "‚ö†Ô∏è –£–≤–∞–≥–∞!\n"
        "–ó–∞–ª–∏—à–∏–ª–æ—Å—å 113 —ñ–∑ 12 000 –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤\n\n"
        "üî• –ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –Ω–∞:\n"
        "‚Äî Glovo\n‚Äî KFC\n‚Äî McDonald‚Äôs\n‚Äî –°—É—à—ñ—è\n‚Äî Dominos Pizza\n\n"
        "–ù–∞ —Å—É–º–∏: 100, 500, 1000 —ñ 2000 –≥—Ä–Ω\n"
    )

    # 2. –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞
    with open("2.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption=(
                "–ì–æ—Ç–æ–≤—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑?\n"
                "–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ –±–æ—Ç ü§ñ"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏!", url=LINK_PODTV)]
            ])
        )

    await asyncio.sleep(5)
    # 3. –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
    await context.bot.send_message(
        chat_id, "–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –∑–∞–∫–ª–∞–¥ —Ñ–∞—Å—Ç—Ñ—É–¥—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(name, callback_data=f"srv_{name}")]
            for name in SERVICES
        ])
    )
    return STEP_SERVICE

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    service = query.data.replace("srv_", "")
    user_data[chat_id]["service"] = service
    # 2. –í—ã–±–æ—Ä —Å—É–º–º—ã
    await context.bot.send_message(
        chat_id,
        "–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∏–π! –û–±–µ—Ä—ñ—Ç—å —Å—É–º—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(s, callback_data=f"sum_{s}")] for s in SUMS
        ])
    )
    return STEP_SUM

async def handle_sum(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    s = query.data.replace("sum_", "")
    user_data[chat_id]["sum"] = s
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ + –∫–Ω–æ–ø–∫–∞
    await context.bot.send_message(
        chat_id,
        f"–î—è–∫—É—î–º–æ! –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤–∞—à –≤–∏–±—ñ—Ä:\n–°–µ—Ä–≤—ñ—Å ‚Äî {user_data[chat_id]['service']}, –°—É–º–∞ ‚Äî {s}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="final_confirm")]
        ])
    )
    return STEP_FINAL_CONFIRM

async def handle_final_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    service = user_data[chat_id]['service']
    # 3.1 –ë–ª—é—Ä —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫–∞ ‚Äú–ü—Ä–æ–π—Ç–∏‚Äù
    with open(CERT_BLUR_IMG[service], "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ ‚úÖ\n–ß–µ—Ä–µ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–æ—Ç—ñ–≤, —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É", url=LINK_PODTV)]
            ])
        )
    await asyncio.sleep(5)
    # 4. –í—ñ–∫
    with open("1.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–¢–æ–±—ñ –≤–∂–µ —î 18 —Ä–æ–∫—ñ–≤?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–¢–∞–∫‚úÖ", url=LINK_18_YES)],
                [InlineKeyboardButton("–ù—ñ‚ùå", url=LINK_18_NO)],
            ])
        )
    await asyncio.sleep(5)
    # 4.1 –°—Ç–∞—Ç—å
    with open("3.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–í–∏–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üë® –ß–æ–ª–æ–≤—ñ—á–∞", url=LINK_MAN)],
                [InlineKeyboardButton("üë© –ñ—ñ–Ω–æ—á–∞", url=LINK_WOMAN)],
            ])
        )
    await asyncio.sleep(5)
    # 5. –£–∫—Ä–∞—ó–Ω–µ—Ü—å (—Å —Ñ–æ—Ç–æ)
    with open("7.jpg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–¢–∏ –∑ –£–∫—Ä–∞—ó–Ω–∏?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–Ø —É–∫—Ä–∞—ó–Ω–µ—Ü—å üá∫üá¶", url=LINK_UA)],
                [InlineKeyboardButton("–ù—ñ‚ùå", url=LINK_NOT_UA)]
            ])
        )
    await asyncio.sleep(5)
    # 6. –†–µ–≥—ñ–æ–Ω
    with open("4.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–ó —è–∫–æ–≥–æ —Ç–∏ —Ä–µ–≥—ñ–æ–Ω—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üá∫üá¶ –°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['east'])],
                [InlineKeyboardButton("üá∫üá¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['central'])],
                [InlineKeyboardButton("üá∫üá¶ –ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['west'])],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['south'])],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['north'])],
            ])
        )
    await asyncio.sleep(5)
    # 7. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞
    with open("5.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_promo")]
            ])
        )
    return STEP_GET_PROMO

async def handle_get_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    service = user_data[chat_id]['service']
    with open(CERT_FINAL_IMG[service], "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption=(
                f"üéâ –¢–≤—ñ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤–∏–π! –ü–æ–∫–∞–∂–∏ –π–æ–≥–æ –Ω–∞ –∫–∞—Å—ñ —É –∑–∞–∫–ª–∞–¥—ñ {service}. –°—É–º–∞: {user_data[chat_id]['sum']}"
            )
        )
    return ConversationHandler.END

def main():
    threading.Thread(target=run_flask, daemon=True).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STEP_SERVICE: [CallbackQueryHandler(handle_service, pattern=r"^srv_")],
            STEP_SUM: [CallbackQueryHandler(handle_sum, pattern=r"^sum_")],
            STEP_FINAL_CONFIRM: [CallbackQueryHandler(handle_final_confirm, pattern=r"^final_confirm$")],
            STEP_GET_PROMO: [CallbackQueryHandler(handle_get_promo, pattern="get_promo")],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
